# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.nfs_export_options import NFSExportOptions
from rest.models.reference import Reference
from rest import util

from rest.models.nfs_export_options import NFSExportOptions  # noqa: E501
from rest.models.reference import Reference  # noqa: E501

class ShareDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, host=None, path=None, type=None, options=None, security_modes=None, options_as_string=None):  # noqa: E501
        """ShareDefinition - a model defined in OpenAPI

        :param id: The id of this ShareDefinition.  # noqa: E501
        :type id: str
        :param name: The name of this ShareDefinition.  # noqa: E501
        :type name: str
        :param host: The host of this ShareDefinition.  # noqa: E501
        :type host: Reference
        :param path: The path of this ShareDefinition.  # noqa: E501
        :type path: str
        :param type: The type of this ShareDefinition.  # noqa: E501
        :type type: str
        :param options: The options of this ShareDefinition.  # noqa: E501
        :type options: NFSExportOptions
        :param security_modes: The security_modes of this ShareDefinition.  # noqa: E501
        :type security_modes: List[str]
        :param options_as_string: The options_as_string of this ShareDefinition.  # noqa: E501
        :type options_as_string: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'host': Reference,
            'path': str,
            'type': str,
            'options': NFSExportOptions,
            'security_modes': List[str],
            'options_as_string': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'host': 'host',
            'path': 'path',
            'type': 'type',
            'options': 'options',
            'security_modes': 'securityModes',
            'options_as_string': 'optionsAsString'
        }

        self._id = id
        self._name = name
        self._host = host
        self._path = path
        self._type = type
        self._options = options
        self._security_modes = security_modes
        self._options_as_string = options_as_string

    @classmethod
    def from_dict(cls, dikt) -> 'ShareDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShareDefinition of this ShareDefinition.  # noqa: E501
        :rtype: ShareDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ShareDefinition.


        :return: The id of this ShareDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShareDefinition.


        :param id: The id of this ShareDefinition.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ShareDefinition.


        :return: The name of this ShareDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShareDefinition.


        :param name: The name of this ShareDefinition.
        :type name: str
        """

        self._name = name

    @property
    def host(self):
        """Gets the host of this ShareDefinition.


        :return: The host of this ShareDefinition.
        :rtype: Reference
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ShareDefinition.


        :param host: The host of this ShareDefinition.
        :type host: Reference
        """

        self._host = host

    @property
    def path(self):
        """Gets the path of this ShareDefinition.


        :return: The path of this ShareDefinition.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ShareDefinition.


        :param path: The path of this ShareDefinition.
        :type path: str
        """

        self._path = path

    @property
    def type(self):
        """Gets the type of this ShareDefinition.


        :return: The type of this ShareDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShareDefinition.


        :param type: The type of this ShareDefinition.
        :type type: str
        """

        self._type = type

    @property
    def options(self):
        """Gets the options of this ShareDefinition.


        :return: The options of this ShareDefinition.
        :rtype: NFSExportOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ShareDefinition.


        :param options: The options of this ShareDefinition.
        :type options: NFSExportOptions
        """

        self._options = options

    @property
    def security_modes(self):
        """Gets the security_modes of this ShareDefinition.


        :return: The security_modes of this ShareDefinition.
        :rtype: List[str]
        """
        return self._security_modes

    @security_modes.setter
    def security_modes(self, security_modes):
        """Sets the security_modes of this ShareDefinition.


        :param security_modes: The security_modes of this ShareDefinition.
        :type security_modes: List[str]
        """

        self._security_modes = security_modes

    @property
    def options_as_string(self):
        """Gets the options_as_string of this ShareDefinition.


        :return: The options_as_string of this ShareDefinition.
        :rtype: str
        """
        return self._options_as_string

    @options_as_string.setter
    def options_as_string(self, options_as_string):
        """Sets the options_as_string of this ShareDefinition.


        :param options_as_string: The options_as_string of this ShareDefinition.
        :type options_as_string: str
        """

        self._options_as_string = options_as_string
