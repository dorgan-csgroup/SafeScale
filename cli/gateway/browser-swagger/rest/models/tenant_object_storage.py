# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest import util


class TenantObjectStorage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, endpoint=None, auth_url=None, access_key=None, region=None):  # noqa: E501
        """TenantObjectStorage - a model defined in OpenAPI

        :param type: The type of this TenantObjectStorage.  # noqa: E501
        :type type: str
        :param endpoint: The endpoint of this TenantObjectStorage.  # noqa: E501
        :type endpoint: str
        :param auth_url: The auth_url of this TenantObjectStorage.  # noqa: E501
        :type auth_url: str
        :param access_key: The access_key of this TenantObjectStorage.  # noqa: E501
        :type access_key: str
        :param region: The region of this TenantObjectStorage.  # noqa: E501
        :type region: str
        """
        self.openapi_types = {
            'type': str,
            'endpoint': str,
            'auth_url': str,
            'access_key': str,
            'region': str
        }

        self.attribute_map = {
            'type': 'type',
            'endpoint': 'endpoint',
            'auth_url': 'authUrl',
            'access_key': 'accessKey',
            'region': 'region'
        }

        self._type = type
        self._endpoint = endpoint
        self._auth_url = auth_url
        self._access_key = access_key
        self._region = region

    @classmethod
    def from_dict(cls, dikt) -> 'TenantObjectStorage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TenantObjectStorage of this TenantObjectStorage.  # noqa: E501
        :rtype: TenantObjectStorage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this TenantObjectStorage.


        :return: The type of this TenantObjectStorage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TenantObjectStorage.


        :param type: The type of this TenantObjectStorage.
        :type type: str
        """

        self._type = type

    @property
    def endpoint(self):
        """Gets the endpoint of this TenantObjectStorage.


        :return: The endpoint of this TenantObjectStorage.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this TenantObjectStorage.


        :param endpoint: The endpoint of this TenantObjectStorage.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def auth_url(self):
        """Gets the auth_url of this TenantObjectStorage.


        :return: The auth_url of this TenantObjectStorage.
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this TenantObjectStorage.


        :param auth_url: The auth_url of this TenantObjectStorage.
        :type auth_url: str
        """

        self._auth_url = auth_url

    @property
    def access_key(self):
        """Gets the access_key of this TenantObjectStorage.


        :return: The access_key of this TenantObjectStorage.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this TenantObjectStorage.


        :param access_key: The access_key of this TenantObjectStorage.
        :type access_key: str
        """

        self._access_key = access_key

    @property
    def region(self):
        """Gets the region of this TenantObjectStorage.


        :return: The region of this TenantObjectStorage.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TenantObjectStorage.


        :param region: The region of this TenantObjectStorage.
        :type region: str
        """

        self._region = region
