# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.network_state import NetworkState
from rest.models.virtual_ip import VirtualIp
from rest import util

from rest.models.network_state import NetworkState  # noqa: E501
from rest.models.virtual_ip import VirtualIp  # noqa: E501

class Network(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, cidr=None, gateway_id=None, secondary_gateway_id=None, virtual_ip=None, failover=None, state=None, subnets=None, dns_servers=None):  # noqa: E501
        """Network - a model defined in OpenAPI

        :param id: The id of this Network.  # noqa: E501
        :type id: str
        :param name: The name of this Network.  # noqa: E501
        :type name: str
        :param cidr: The cidr of this Network.  # noqa: E501
        :type cidr: str
        :param gateway_id: The gateway_id of this Network.  # noqa: E501
        :type gateway_id: str
        :param secondary_gateway_id: The secondary_gateway_id of this Network.  # noqa: E501
        :type secondary_gateway_id: str
        :param virtual_ip: The virtual_ip of this Network.  # noqa: E501
        :type virtual_ip: VirtualIp
        :param failover: The failover of this Network.  # noqa: E501
        :type failover: bool
        :param state: The state of this Network.  # noqa: E501
        :type state: NetworkState
        :param subnets: The subnets of this Network.  # noqa: E501
        :type subnets: List[str]
        :param dns_servers: The dns_servers of this Network.  # noqa: E501
        :type dns_servers: List[str]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'cidr': str,
            'gateway_id': str,
            'secondary_gateway_id': str,
            'virtual_ip': VirtualIp,
            'failover': bool,
            'state': NetworkState,
            'subnets': List[str],
            'dns_servers': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'cidr': 'cidr',
            'gateway_id': 'gatewayId',
            'secondary_gateway_id': 'secondaryGatewayId',
            'virtual_ip': 'virtualIp',
            'failover': 'failover',
            'state': 'state',
            'subnets': 'subnets',
            'dns_servers': 'dnsServers'
        }

        self._id = id
        self._name = name
        self._cidr = cidr
        self._gateway_id = gateway_id
        self._secondary_gateway_id = secondary_gateway_id
        self._virtual_ip = virtual_ip
        self._failover = failover
        self._state = state
        self._subnets = subnets
        self._dns_servers = dns_servers

    @classmethod
    def from_dict(cls, dikt) -> 'Network':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Network of this Network.  # noqa: E501
        :rtype: Network
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Network.


        :return: The id of this Network.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Network.


        :param id: The id of this Network.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Network.


        :return: The name of this Network.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Network.


        :param name: The name of this Network.
        :type name: str
        """

        self._name = name

    @property
    def cidr(self):
        """Gets the cidr of this Network.


        :return: The cidr of this Network.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this Network.


        :param cidr: The cidr of this Network.
        :type cidr: str
        """

        self._cidr = cidr

    @property
    def gateway_id(self):
        """Gets the gateway_id of this Network.


        :return: The gateway_id of this Network.
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this Network.


        :param gateway_id: The gateway_id of this Network.
        :type gateway_id: str
        """

        self._gateway_id = gateway_id

    @property
    def secondary_gateway_id(self):
        """Gets the secondary_gateway_id of this Network.


        :return: The secondary_gateway_id of this Network.
        :rtype: str
        """
        return self._secondary_gateway_id

    @secondary_gateway_id.setter
    def secondary_gateway_id(self, secondary_gateway_id):
        """Sets the secondary_gateway_id of this Network.


        :param secondary_gateway_id: The secondary_gateway_id of this Network.
        :type secondary_gateway_id: str
        """

        self._secondary_gateway_id = secondary_gateway_id

    @property
    def virtual_ip(self):
        """Gets the virtual_ip of this Network.


        :return: The virtual_ip of this Network.
        :rtype: VirtualIp
        """
        return self._virtual_ip

    @virtual_ip.setter
    def virtual_ip(self, virtual_ip):
        """Sets the virtual_ip of this Network.


        :param virtual_ip: The virtual_ip of this Network.
        :type virtual_ip: VirtualIp
        """

        self._virtual_ip = virtual_ip

    @property
    def failover(self):
        """Gets the failover of this Network.


        :return: The failover of this Network.
        :rtype: bool
        """
        return self._failover

    @failover.setter
    def failover(self, failover):
        """Sets the failover of this Network.


        :param failover: The failover of this Network.
        :type failover: bool
        """

        self._failover = failover

    @property
    def state(self):
        """Gets the state of this Network.


        :return: The state of this Network.
        :rtype: NetworkState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Network.


        :param state: The state of this Network.
        :type state: NetworkState
        """

        self._state = state

    @property
    def subnets(self):
        """Gets the subnets of this Network.


        :return: The subnets of this Network.
        :rtype: List[str]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this Network.


        :param subnets: The subnets of this Network.
        :type subnets: List[str]
        """

        self._subnets = subnets

    @property
    def dns_servers(self):
        """Gets the dns_servers of this Network.


        :return: The dns_servers of this Network.
        :rtype: List[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this Network.


        :param dns_servers: The dns_servers of this Network.
        :type dns_servers: List[str]
        """

        self._dns_servers = dns_servers
