# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.cluster_complexity import ClusterComplexity
from rest.models.cluster_flavor import ClusterFlavor
from rest import util

from rest.models.cluster_complexity import ClusterComplexity  # noqa: E501
from rest.models.cluster_flavor import ClusterFlavor  # noqa: E501

class ClusterIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, complexity=None, flavor=None, admin_password=None, private_key=None):  # noqa: E501
        """ClusterIdentity - a model defined in OpenAPI

        :param name: The name of this ClusterIdentity.  # noqa: E501
        :type name: str
        :param complexity: The complexity of this ClusterIdentity.  # noqa: E501
        :type complexity: ClusterComplexity
        :param flavor: The flavor of this ClusterIdentity.  # noqa: E501
        :type flavor: ClusterFlavor
        :param admin_password: The admin_password of this ClusterIdentity.  # noqa: E501
        :type admin_password: str
        :param private_key: The private_key of this ClusterIdentity.  # noqa: E501
        :type private_key: str
        """
        self.openapi_types = {
            'name': str,
            'complexity': ClusterComplexity,
            'flavor': ClusterFlavor,
            'admin_password': str,
            'private_key': str
        }

        self.attribute_map = {
            'name': 'name',
            'complexity': 'complexity',
            'flavor': 'flavor',
            'admin_password': 'adminPassword',
            'private_key': 'privateKey'
        }

        self._name = name
        self._complexity = complexity
        self._flavor = flavor
        self._admin_password = admin_password
        self._private_key = private_key

    @classmethod
    def from_dict(cls, dikt) -> 'ClusterIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClusterIdentity of this ClusterIdentity.  # noqa: E501
        :rtype: ClusterIdentity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ClusterIdentity.


        :return: The name of this ClusterIdentity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterIdentity.


        :param name: The name of this ClusterIdentity.
        :type name: str
        """

        self._name = name

    @property
    def complexity(self):
        """Gets the complexity of this ClusterIdentity.


        :return: The complexity of this ClusterIdentity.
        :rtype: ClusterComplexity
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this ClusterIdentity.


        :param complexity: The complexity of this ClusterIdentity.
        :type complexity: ClusterComplexity
        """

        self._complexity = complexity

    @property
    def flavor(self):
        """Gets the flavor of this ClusterIdentity.


        :return: The flavor of this ClusterIdentity.
        :rtype: ClusterFlavor
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this ClusterIdentity.


        :param flavor: The flavor of this ClusterIdentity.
        :type flavor: ClusterFlavor
        """

        self._flavor = flavor

    @property
    def admin_password(self):
        """Gets the admin_password of this ClusterIdentity.


        :return: The admin_password of this ClusterIdentity.
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this ClusterIdentity.


        :param admin_password: The admin_password of this ClusterIdentity.
        :type admin_password: str
        """

        self._admin_password = admin_password

    @property
    def private_key(self):
        """Gets the private_key of this ClusterIdentity.


        :return: The private_key of this ClusterIdentity.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this ClusterIdentity.


        :param private_key: The private_key of this ClusterIdentity.
        :type private_key: str
        """

        self._private_key = private_key
