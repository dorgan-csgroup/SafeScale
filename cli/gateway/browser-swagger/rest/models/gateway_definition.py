# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.host_sizing import HostSizing
from rest import util

from rest.models.host_sizing import HostSizing  # noqa: E501

class GatewayDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu=None, ram=None, disk=None, image_id=None, name=None, gpu_count=None, gpu_type=None, sizing=None, sizing_as_string=None):  # noqa: E501
        """GatewayDefinition - a model defined in OpenAPI

        :param cpu: The cpu of this GatewayDefinition.  # noqa: E501
        :type cpu: int
        :param ram: The ram of this GatewayDefinition.  # noqa: E501
        :type ram: float
        :param disk: The disk of this GatewayDefinition.  # noqa: E501
        :type disk: int
        :param image_id: The image_id of this GatewayDefinition.  # noqa: E501
        :type image_id: str
        :param name: The name of this GatewayDefinition.  # noqa: E501
        :type name: str
        :param gpu_count: The gpu_count of this GatewayDefinition.  # noqa: E501
        :type gpu_count: int
        :param gpu_type: The gpu_type of this GatewayDefinition.  # noqa: E501
        :type gpu_type: str
        :param sizing: The sizing of this GatewayDefinition.  # noqa: E501
        :type sizing: HostSizing
        :param sizing_as_string: The sizing_as_string of this GatewayDefinition.  # noqa: E501
        :type sizing_as_string: str
        """
        self.openapi_types = {
            'cpu': int,
            'ram': float,
            'disk': int,
            'image_id': str,
            'name': str,
            'gpu_count': int,
            'gpu_type': str,
            'sizing': HostSizing,
            'sizing_as_string': str
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'ram': 'ram',
            'disk': 'disk',
            'image_id': 'imageId',
            'name': 'name',
            'gpu_count': 'gpuCount',
            'gpu_type': 'gpuType',
            'sizing': 'sizing',
            'sizing_as_string': 'sizingAsString'
        }

        self._cpu = cpu
        self._ram = ram
        self._disk = disk
        self._image_id = image_id
        self._name = name
        self._gpu_count = gpu_count
        self._gpu_type = gpu_type
        self._sizing = sizing
        self._sizing_as_string = sizing_as_string

    @classmethod
    def from_dict(cls, dikt) -> 'GatewayDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GatewayDefinition of this GatewayDefinition.  # noqa: E501
        :rtype: GatewayDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this GatewayDefinition.


        :return: The cpu of this GatewayDefinition.
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this GatewayDefinition.


        :param cpu: The cpu of this GatewayDefinition.
        :type cpu: int
        """

        self._cpu = cpu

    @property
    def ram(self):
        """Gets the ram of this GatewayDefinition.


        :return: The ram of this GatewayDefinition.
        :rtype: float
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this GatewayDefinition.


        :param ram: The ram of this GatewayDefinition.
        :type ram: float
        """

        self._ram = ram

    @property
    def disk(self):
        """Gets the disk of this GatewayDefinition.


        :return: The disk of this GatewayDefinition.
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this GatewayDefinition.


        :param disk: The disk of this GatewayDefinition.
        :type disk: int
        """

        self._disk = disk

    @property
    def image_id(self):
        """Gets the image_id of this GatewayDefinition.


        :return: The image_id of this GatewayDefinition.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this GatewayDefinition.


        :param image_id: The image_id of this GatewayDefinition.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def name(self):
        """Gets the name of this GatewayDefinition.


        :return: The name of this GatewayDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GatewayDefinition.


        :param name: The name of this GatewayDefinition.
        :type name: str
        """

        self._name = name

    @property
    def gpu_count(self):
        """Gets the gpu_count of this GatewayDefinition.


        :return: The gpu_count of this GatewayDefinition.
        :rtype: int
        """
        return self._gpu_count

    @gpu_count.setter
    def gpu_count(self, gpu_count):
        """Sets the gpu_count of this GatewayDefinition.


        :param gpu_count: The gpu_count of this GatewayDefinition.
        :type gpu_count: int
        """

        self._gpu_count = gpu_count

    @property
    def gpu_type(self):
        """Gets the gpu_type of this GatewayDefinition.


        :return: The gpu_type of this GatewayDefinition.
        :rtype: str
        """
        return self._gpu_type

    @gpu_type.setter
    def gpu_type(self, gpu_type):
        """Sets the gpu_type of this GatewayDefinition.


        :param gpu_type: The gpu_type of this GatewayDefinition.
        :type gpu_type: str
        """

        self._gpu_type = gpu_type

    @property
    def sizing(self):
        """Gets the sizing of this GatewayDefinition.


        :return: The sizing of this GatewayDefinition.
        :rtype: HostSizing
        """
        return self._sizing

    @sizing.setter
    def sizing(self, sizing):
        """Sets the sizing of this GatewayDefinition.


        :param sizing: The sizing of this GatewayDefinition.
        :type sizing: HostSizing
        """

        self._sizing = sizing

    @property
    def sizing_as_string(self):
        """Gets the sizing_as_string of this GatewayDefinition.


        :return: The sizing_as_string of this GatewayDefinition.
        :rtype: str
        """
        return self._sizing_as_string

    @sizing_as_string.setter
    def sizing_as_string(self, sizing_as_string):
        """Sets the sizing_as_string of this GatewayDefinition.


        :param sizing_as_string: The sizing_as_string of this GatewayDefinition.
        :type sizing_as_string: str
        """

        self._sizing_as_string = sizing_as_string
