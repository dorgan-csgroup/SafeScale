# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.host_state import HostState
from rest import util

from rest.models.host_state import HostState  # noqa: E501

class Host(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, cpu=None, ram=None, disk=None, public_ip=None, private_ip=None, state=None, private_key=None, gateway_id=None, os_kind=None, attached_volume_names=None, password=None):  # noqa: E501
        """Host - a model defined in OpenAPI

        :param id: The id of this Host.  # noqa: E501
        :type id: str
        :param name: The name of this Host.  # noqa: E501
        :type name: str
        :param cpu: The cpu of this Host.  # noqa: E501
        :type cpu: int
        :param ram: The ram of this Host.  # noqa: E501
        :type ram: float
        :param disk: The disk of this Host.  # noqa: E501
        :type disk: int
        :param public_ip: The public_ip of this Host.  # noqa: E501
        :type public_ip: str
        :param private_ip: The private_ip of this Host.  # noqa: E501
        :type private_ip: str
        :param state: The state of this Host.  # noqa: E501
        :type state: HostState
        :param private_key: The private_key of this Host.  # noqa: E501
        :type private_key: str
        :param gateway_id: The gateway_id of this Host.  # noqa: E501
        :type gateway_id: str
        :param os_kind: The os_kind of this Host.  # noqa: E501
        :type os_kind: str
        :param attached_volume_names: The attached_volume_names of this Host.  # noqa: E501
        :type attached_volume_names: List[str]
        :param password: The password of this Host.  # noqa: E501
        :type password: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'cpu': int,
            'ram': float,
            'disk': int,
            'public_ip': str,
            'private_ip': str,
            'state': HostState,
            'private_key': str,
            'gateway_id': str,
            'os_kind': str,
            'attached_volume_names': List[str],
            'password': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'cpu': 'cpu',
            'ram': 'ram',
            'disk': 'disk',
            'public_ip': 'publicIp',
            'private_ip': 'privateIp',
            'state': 'state',
            'private_key': 'privateKey',
            'gateway_id': 'gatewayId',
            'os_kind': 'osKind',
            'attached_volume_names': 'attachedVolumeNames',
            'password': 'password'
        }

        self._id = id
        self._name = name
        self._cpu = cpu
        self._ram = ram
        self._disk = disk
        self._public_ip = public_ip
        self._private_ip = private_ip
        self._state = state
        self._private_key = private_key
        self._gateway_id = gateway_id
        self._os_kind = os_kind
        self._attached_volume_names = attached_volume_names
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'Host':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Host of this Host.  # noqa: E501
        :rtype: Host
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Host.


        :return: The id of this Host.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Host.


        :param id: The id of this Host.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Host.


        :return: The name of this Host.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Host.


        :param name: The name of this Host.
        :type name: str
        """

        self._name = name

    @property
    def cpu(self):
        """Gets the cpu of this Host.


        :return: The cpu of this Host.
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this Host.


        :param cpu: The cpu of this Host.
        :type cpu: int
        """

        self._cpu = cpu

    @property
    def ram(self):
        """Gets the ram of this Host.


        :return: The ram of this Host.
        :rtype: float
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this Host.


        :param ram: The ram of this Host.
        :type ram: float
        """

        self._ram = ram

    @property
    def disk(self):
        """Gets the disk of this Host.


        :return: The disk of this Host.
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this Host.


        :param disk: The disk of this Host.
        :type disk: int
        """

        self._disk = disk

    @property
    def public_ip(self):
        """Gets the public_ip of this Host.


        :return: The public_ip of this Host.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this Host.


        :param public_ip: The public_ip of this Host.
        :type public_ip: str
        """

        self._public_ip = public_ip

    @property
    def private_ip(self):
        """Gets the private_ip of this Host.


        :return: The private_ip of this Host.
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this Host.


        :param private_ip: The private_ip of this Host.
        :type private_ip: str
        """

        self._private_ip = private_ip

    @property
    def state(self):
        """Gets the state of this Host.


        :return: The state of this Host.
        :rtype: HostState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Host.


        :param state: The state of this Host.
        :type state: HostState
        """

        self._state = state

    @property
    def private_key(self):
        """Gets the private_key of this Host.


        :return: The private_key of this Host.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this Host.


        :param private_key: The private_key of this Host.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def gateway_id(self):
        """Gets the gateway_id of this Host.


        :return: The gateway_id of this Host.
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this Host.


        :param gateway_id: The gateway_id of this Host.
        :type gateway_id: str
        """

        self._gateway_id = gateway_id

    @property
    def os_kind(self):
        """Gets the os_kind of this Host.


        :return: The os_kind of this Host.
        :rtype: str
        """
        return self._os_kind

    @os_kind.setter
    def os_kind(self, os_kind):
        """Sets the os_kind of this Host.


        :param os_kind: The os_kind of this Host.
        :type os_kind: str
        """

        self._os_kind = os_kind

    @property
    def attached_volume_names(self):
        """Gets the attached_volume_names of this Host.


        :return: The attached_volume_names of this Host.
        :rtype: List[str]
        """
        return self._attached_volume_names

    @attached_volume_names.setter
    def attached_volume_names(self, attached_volume_names):
        """Sets the attached_volume_names of this Host.


        :param attached_volume_names: The attached_volume_names of this Host.
        :type attached_volume_names: List[str]
        """

        self._attached_volume_names = attached_volume_names

    @property
    def password(self):
        """Gets the password of this Host.


        :return: The password of this Host.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Host.


        :param password: The password of this Host.
        :type password: str
        """

        self._password = password
