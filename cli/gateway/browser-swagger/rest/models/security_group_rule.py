# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.security_group_rule_direction import SecurityGroupRuleDirection
from rest.models.security_group_rule_ether_type import SecurityGroupRuleEtherType
from rest import util

from rest.models.security_group_rule_direction import SecurityGroupRuleDirection  # noqa: E501
from rest.models.security_group_rule_ether_type import SecurityGroupRuleEtherType  # noqa: E501

class SecurityGroupRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ids=None, description=None, ether_type=None, direction=None, protocol=None, port_from=None, port_to=None, involved=None):  # noqa: E501
        """SecurityGroupRule - a model defined in OpenAPI

        :param ids: The ids of this SecurityGroupRule.  # noqa: E501
        :type ids: List[str]
        :param description: The description of this SecurityGroupRule.  # noqa: E501
        :type description: str
        :param ether_type: The ether_type of this SecurityGroupRule.  # noqa: E501
        :type ether_type: SecurityGroupRuleEtherType
        :param direction: The direction of this SecurityGroupRule.  # noqa: E501
        :type direction: SecurityGroupRuleDirection
        :param protocol: The protocol of this SecurityGroupRule.  # noqa: E501
        :type protocol: str
        :param port_from: The port_from of this SecurityGroupRule.  # noqa: E501
        :type port_from: int
        :param port_to: The port_to of this SecurityGroupRule.  # noqa: E501
        :type port_to: int
        :param involved: The involved of this SecurityGroupRule.  # noqa: E501
        :type involved: List[str]
        """
        self.openapi_types = {
            'ids': List[str],
            'description': str,
            'ether_type': SecurityGroupRuleEtherType,
            'direction': SecurityGroupRuleDirection,
            'protocol': str,
            'port_from': int,
            'port_to': int,
            'involved': List[str]
        }

        self.attribute_map = {
            'ids': 'ids',
            'description': 'description',
            'ether_type': 'etherType',
            'direction': 'direction',
            'protocol': 'protocol',
            'port_from': 'portFrom',
            'port_to': 'portTo',
            'involved': 'involved'
        }

        self._ids = ids
        self._description = description
        self._ether_type = ether_type
        self._direction = direction
        self._protocol = protocol
        self._port_from = port_from
        self._port_to = port_to
        self._involved = involved

    @classmethod
    def from_dict(cls, dikt) -> 'SecurityGroupRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SecurityGroupRule of this SecurityGroupRule.  # noqa: E501
        :rtype: SecurityGroupRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ids(self):
        """Gets the ids of this SecurityGroupRule.


        :return: The ids of this SecurityGroupRule.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this SecurityGroupRule.


        :param ids: The ids of this SecurityGroupRule.
        :type ids: List[str]
        """

        self._ids = ids

    @property
    def description(self):
        """Gets the description of this SecurityGroupRule.


        :return: The description of this SecurityGroupRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SecurityGroupRule.


        :param description: The description of this SecurityGroupRule.
        :type description: str
        """

        self._description = description

    @property
    def ether_type(self):
        """Gets the ether_type of this SecurityGroupRule.


        :return: The ether_type of this SecurityGroupRule.
        :rtype: SecurityGroupRuleEtherType
        """
        return self._ether_type

    @ether_type.setter
    def ether_type(self, ether_type):
        """Sets the ether_type of this SecurityGroupRule.


        :param ether_type: The ether_type of this SecurityGroupRule.
        :type ether_type: SecurityGroupRuleEtherType
        """

        self._ether_type = ether_type

    @property
    def direction(self):
        """Gets the direction of this SecurityGroupRule.


        :return: The direction of this SecurityGroupRule.
        :rtype: SecurityGroupRuleDirection
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this SecurityGroupRule.


        :param direction: The direction of this SecurityGroupRule.
        :type direction: SecurityGroupRuleDirection
        """

        self._direction = direction

    @property
    def protocol(self):
        """Gets the protocol of this SecurityGroupRule.


        :return: The protocol of this SecurityGroupRule.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SecurityGroupRule.


        :param protocol: The protocol of this SecurityGroupRule.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def port_from(self):
        """Gets the port_from of this SecurityGroupRule.


        :return: The port_from of this SecurityGroupRule.
        :rtype: int
        """
        return self._port_from

    @port_from.setter
    def port_from(self, port_from):
        """Sets the port_from of this SecurityGroupRule.


        :param port_from: The port_from of this SecurityGroupRule.
        :type port_from: int
        """

        self._port_from = port_from

    @property
    def port_to(self):
        """Gets the port_to of this SecurityGroupRule.


        :return: The port_to of this SecurityGroupRule.
        :rtype: int
        """
        return self._port_to

    @port_to.setter
    def port_to(self, port_to):
        """Sets the port_to of this SecurityGroupRule.


        :param port_to: The port_to of this SecurityGroupRule.
        :type port_to: int
        """

        self._port_to = port_to

    @property
    def involved(self):
        """Gets the involved of this SecurityGroupRule.


        :return: The involved of this SecurityGroupRule.
        :rtype: List[str]
        """
        return self._involved

    @involved.setter
    def involved(self, involved):
        """Sets the involved of this SecurityGroupRule.


        :param involved: The involved of this SecurityGroupRule.
        :type involved: List[str]
        """

        self._involved = involved
