# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.key_value import KeyValue
from rest import util

from rest.models.key_value import KeyValue  # noqa: E501

class TenantCompute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region=None, sub_region=None, availability_zone=None, context=None, api_key=None, whitelist_template_regex=None, blacklist_template_regex=None, default_image=None, default_volume_speed=None, dns_list=None, operator_username=None):  # noqa: E501
        """TenantCompute - a model defined in OpenAPI

        :param region: The region of this TenantCompute.  # noqa: E501
        :type region: str
        :param sub_region: The sub_region of this TenantCompute.  # noqa: E501
        :type sub_region: str
        :param availability_zone: The availability_zone of this TenantCompute.  # noqa: E501
        :type availability_zone: str
        :param context: The context of this TenantCompute.  # noqa: E501
        :type context: KeyValue
        :param api_key: The api_key of this TenantCompute.  # noqa: E501
        :type api_key: KeyValue
        :param whitelist_template_regex: The whitelist_template_regex of this TenantCompute.  # noqa: E501
        :type whitelist_template_regex: str
        :param blacklist_template_regex: The blacklist_template_regex of this TenantCompute.  # noqa: E501
        :type blacklist_template_regex: str
        :param default_image: The default_image of this TenantCompute.  # noqa: E501
        :type default_image: str
        :param default_volume_speed: The default_volume_speed of this TenantCompute.  # noqa: E501
        :type default_volume_speed: str
        :param dns_list: The dns_list of this TenantCompute.  # noqa: E501
        :type dns_list: List[str]
        :param operator_username: The operator_username of this TenantCompute.  # noqa: E501
        :type operator_username: str
        """
        self.openapi_types = {
            'region': str,
            'sub_region': str,
            'availability_zone': str,
            'context': KeyValue,
            'api_key': KeyValue,
            'whitelist_template_regex': str,
            'blacklist_template_regex': str,
            'default_image': str,
            'default_volume_speed': str,
            'dns_list': List[str],
            'operator_username': str
        }

        self.attribute_map = {
            'region': 'region',
            'sub_region': 'subRegion',
            'availability_zone': 'availabilityZone',
            'context': 'context',
            'api_key': 'apiKey',
            'whitelist_template_regex': 'whitelistTemplateRegex',
            'blacklist_template_regex': 'blacklistTemplateRegex',
            'default_image': 'defaultImage',
            'default_volume_speed': 'defaultVolumeSpeed',
            'dns_list': 'dnsList',
            'operator_username': 'operatorUsername'
        }

        self._region = region
        self._sub_region = sub_region
        self._availability_zone = availability_zone
        self._context = context
        self._api_key = api_key
        self._whitelist_template_regex = whitelist_template_regex
        self._blacklist_template_regex = blacklist_template_regex
        self._default_image = default_image
        self._default_volume_speed = default_volume_speed
        self._dns_list = dns_list
        self._operator_username = operator_username

    @classmethod
    def from_dict(cls, dikt) -> 'TenantCompute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TenantCompute of this TenantCompute.  # noqa: E501
        :rtype: TenantCompute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region(self):
        """Gets the region of this TenantCompute.


        :return: The region of this TenantCompute.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TenantCompute.


        :param region: The region of this TenantCompute.
        :type region: str
        """

        self._region = region

    @property
    def sub_region(self):
        """Gets the sub_region of this TenantCompute.


        :return: The sub_region of this TenantCompute.
        :rtype: str
        """
        return self._sub_region

    @sub_region.setter
    def sub_region(self, sub_region):
        """Sets the sub_region of this TenantCompute.


        :param sub_region: The sub_region of this TenantCompute.
        :type sub_region: str
        """

        self._sub_region = sub_region

    @property
    def availability_zone(self):
        """Gets the availability_zone of this TenantCompute.


        :return: The availability_zone of this TenantCompute.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this TenantCompute.


        :param availability_zone: The availability_zone of this TenantCompute.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def context(self):
        """Gets the context of this TenantCompute.


        :return: The context of this TenantCompute.
        :rtype: KeyValue
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this TenantCompute.


        :param context: The context of this TenantCompute.
        :type context: KeyValue
        """

        self._context = context

    @property
    def api_key(self):
        """Gets the api_key of this TenantCompute.


        :return: The api_key of this TenantCompute.
        :rtype: KeyValue
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this TenantCompute.


        :param api_key: The api_key of this TenantCompute.
        :type api_key: KeyValue
        """

        self._api_key = api_key

    @property
    def whitelist_template_regex(self):
        """Gets the whitelist_template_regex of this TenantCompute.


        :return: The whitelist_template_regex of this TenantCompute.
        :rtype: str
        """
        return self._whitelist_template_regex

    @whitelist_template_regex.setter
    def whitelist_template_regex(self, whitelist_template_regex):
        """Sets the whitelist_template_regex of this TenantCompute.


        :param whitelist_template_regex: The whitelist_template_regex of this TenantCompute.
        :type whitelist_template_regex: str
        """

        self._whitelist_template_regex = whitelist_template_regex

    @property
    def blacklist_template_regex(self):
        """Gets the blacklist_template_regex of this TenantCompute.


        :return: The blacklist_template_regex of this TenantCompute.
        :rtype: str
        """
        return self._blacklist_template_regex

    @blacklist_template_regex.setter
    def blacklist_template_regex(self, blacklist_template_regex):
        """Sets the blacklist_template_regex of this TenantCompute.


        :param blacklist_template_regex: The blacklist_template_regex of this TenantCompute.
        :type blacklist_template_regex: str
        """

        self._blacklist_template_regex = blacklist_template_regex

    @property
    def default_image(self):
        """Gets the default_image of this TenantCompute.


        :return: The default_image of this TenantCompute.
        :rtype: str
        """
        return self._default_image

    @default_image.setter
    def default_image(self, default_image):
        """Sets the default_image of this TenantCompute.


        :param default_image: The default_image of this TenantCompute.
        :type default_image: str
        """

        self._default_image = default_image

    @property
    def default_volume_speed(self):
        """Gets the default_volume_speed of this TenantCompute.


        :return: The default_volume_speed of this TenantCompute.
        :rtype: str
        """
        return self._default_volume_speed

    @default_volume_speed.setter
    def default_volume_speed(self, default_volume_speed):
        """Sets the default_volume_speed of this TenantCompute.


        :param default_volume_speed: The default_volume_speed of this TenantCompute.
        :type default_volume_speed: str
        """

        self._default_volume_speed = default_volume_speed

    @property
    def dns_list(self):
        """Gets the dns_list of this TenantCompute.


        :return: The dns_list of this TenantCompute.
        :rtype: List[str]
        """
        return self._dns_list

    @dns_list.setter
    def dns_list(self, dns_list):
        """Sets the dns_list of this TenantCompute.


        :param dns_list: The dns_list of this TenantCompute.
        :type dns_list: List[str]
        """

        self._dns_list = dns_list

    @property
    def operator_username(self):
        """Gets the operator_username of this TenantCompute.


        :return: The operator_username of this TenantCompute.
        :rtype: str
        """
        return self._operator_username

    @operator_username.setter
    def operator_username(self, operator_username):
        """Sets the operator_username of this TenantCompute.


        :param operator_username: The operator_username of this TenantCompute.
        :type operator_username: str
        """

        self._operator_username = operator_username
