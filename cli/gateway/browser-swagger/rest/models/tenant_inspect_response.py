# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.tenant_compute import TenantCompute
from rest.models.tenant_identity import TenantIdentity
from rest.models.tenant_metadata import TenantMetadata
from rest.models.tenant_object_storage import TenantObjectStorage
from rest import util

from rest.models.tenant_compute import TenantCompute  # noqa: E501
from rest.models.tenant_identity import TenantIdentity  # noqa: E501
from rest.models.tenant_metadata import TenantMetadata  # noqa: E501
from rest.models.tenant_object_storage import TenantObjectStorage  # noqa: E501

class TenantInspectResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, provider=None, identity=None, compute=None, object_storage=None, metadata=None):  # noqa: E501
        """TenantInspectResponse - a model defined in OpenAPI

        :param name: The name of this TenantInspectResponse.  # noqa: E501
        :type name: str
        :param provider: The provider of this TenantInspectResponse.  # noqa: E501
        :type provider: str
        :param identity: The identity of this TenantInspectResponse.  # noqa: E501
        :type identity: TenantIdentity
        :param compute: The compute of this TenantInspectResponse.  # noqa: E501
        :type compute: TenantCompute
        :param object_storage: The object_storage of this TenantInspectResponse.  # noqa: E501
        :type object_storage: TenantObjectStorage
        :param metadata: The metadata of this TenantInspectResponse.  # noqa: E501
        :type metadata: TenantMetadata
        """
        self.openapi_types = {
            'name': str,
            'provider': str,
            'identity': TenantIdentity,
            'compute': TenantCompute,
            'object_storage': TenantObjectStorage,
            'metadata': TenantMetadata
        }

        self.attribute_map = {
            'name': 'name',
            'provider': 'provider',
            'identity': 'identity',
            'compute': 'compute',
            'object_storage': 'objectStorage',
            'metadata': 'metadata'
        }

        self._name = name
        self._provider = provider
        self._identity = identity
        self._compute = compute
        self._object_storage = object_storage
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'TenantInspectResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TenantInspectResponse of this TenantInspectResponse.  # noqa: E501
        :rtype: TenantInspectResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TenantInspectResponse.


        :return: The name of this TenantInspectResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TenantInspectResponse.


        :param name: The name of this TenantInspectResponse.
        :type name: str
        """

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this TenantInspectResponse.


        :return: The provider of this TenantInspectResponse.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this TenantInspectResponse.


        :param provider: The provider of this TenantInspectResponse.
        :type provider: str
        """

        self._provider = provider

    @property
    def identity(self):
        """Gets the identity of this TenantInspectResponse.


        :return: The identity of this TenantInspectResponse.
        :rtype: TenantIdentity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this TenantInspectResponse.


        :param identity: The identity of this TenantInspectResponse.
        :type identity: TenantIdentity
        """

        self._identity = identity

    @property
    def compute(self):
        """Gets the compute of this TenantInspectResponse.


        :return: The compute of this TenantInspectResponse.
        :rtype: TenantCompute
        """
        return self._compute

    @compute.setter
    def compute(self, compute):
        """Sets the compute of this TenantInspectResponse.


        :param compute: The compute of this TenantInspectResponse.
        :type compute: TenantCompute
        """

        self._compute = compute

    @property
    def object_storage(self):
        """Gets the object_storage of this TenantInspectResponse.


        :return: The object_storage of this TenantInspectResponse.
        :rtype: TenantObjectStorage
        """
        return self._object_storage

    @object_storage.setter
    def object_storage(self, object_storage):
        """Sets the object_storage of this TenantInspectResponse.


        :param object_storage: The object_storage of this TenantInspectResponse.
        :type object_storage: TenantObjectStorage
        """

        self._object_storage = object_storage

    @property
    def metadata(self):
        """Gets the metadata of this TenantInspectResponse.


        :return: The metadata of this TenantInspectResponse.
        :rtype: TenantMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TenantInspectResponse.


        :param metadata: The metadata of this TenantInspectResponse.
        :type metadata: TenantMetadata
        """

        self._metadata = metadata
