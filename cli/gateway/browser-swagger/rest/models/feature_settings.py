# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest import util


class FeatureSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, skip_proxy=None, serialize=None, ignore_feature_requirements=None, ignore_sizing_requirements=None, add_unconditionally=None):  # noqa: E501
        """FeatureSettings - a model defined in OpenAPI

        :param skip_proxy: The skip_proxy of this FeatureSettings.  # noqa: E501
        :type skip_proxy: bool
        :param serialize: The serialize of this FeatureSettings.  # noqa: E501
        :type serialize: bool
        :param ignore_feature_requirements: The ignore_feature_requirements of this FeatureSettings.  # noqa: E501
        :type ignore_feature_requirements: bool
        :param ignore_sizing_requirements: The ignore_sizing_requirements of this FeatureSettings.  # noqa: E501
        :type ignore_sizing_requirements: bool
        :param add_unconditionally: The add_unconditionally of this FeatureSettings.  # noqa: E501
        :type add_unconditionally: bool
        """
        self.openapi_types = {
            'skip_proxy': bool,
            'serialize': bool,
            'ignore_feature_requirements': bool,
            'ignore_sizing_requirements': bool,
            'add_unconditionally': bool
        }

        self.attribute_map = {
            'skip_proxy': 'skipProxy',
            'serialize': 'serialize',
            'ignore_feature_requirements': 'ignoreFeatureRequirements',
            'ignore_sizing_requirements': 'ignoreSizingRequirements',
            'add_unconditionally': 'addUnconditionally'
        }

        self._skip_proxy = skip_proxy
        self._serialize = serialize
        self._ignore_feature_requirements = ignore_feature_requirements
        self._ignore_sizing_requirements = ignore_sizing_requirements
        self._add_unconditionally = add_unconditionally

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureSettings of this FeatureSettings.  # noqa: E501
        :rtype: FeatureSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def skip_proxy(self):
        """Gets the skip_proxy of this FeatureSettings.


        :return: The skip_proxy of this FeatureSettings.
        :rtype: bool
        """
        return self._skip_proxy

    @skip_proxy.setter
    def skip_proxy(self, skip_proxy):
        """Sets the skip_proxy of this FeatureSettings.


        :param skip_proxy: The skip_proxy of this FeatureSettings.
        :type skip_proxy: bool
        """

        self._skip_proxy = skip_proxy

    @property
    def serialize(self):
        """Gets the serialize of this FeatureSettings.


        :return: The serialize of this FeatureSettings.
        :rtype: bool
        """
        return self._serialize

    @serialize.setter
    def serialize(self, serialize):
        """Sets the serialize of this FeatureSettings.


        :param serialize: The serialize of this FeatureSettings.
        :type serialize: bool
        """

        self._serialize = serialize

    @property
    def ignore_feature_requirements(self):
        """Gets the ignore_feature_requirements of this FeatureSettings.


        :return: The ignore_feature_requirements of this FeatureSettings.
        :rtype: bool
        """
        return self._ignore_feature_requirements

    @ignore_feature_requirements.setter
    def ignore_feature_requirements(self, ignore_feature_requirements):
        """Sets the ignore_feature_requirements of this FeatureSettings.


        :param ignore_feature_requirements: The ignore_feature_requirements of this FeatureSettings.
        :type ignore_feature_requirements: bool
        """

        self._ignore_feature_requirements = ignore_feature_requirements

    @property
    def ignore_sizing_requirements(self):
        """Gets the ignore_sizing_requirements of this FeatureSettings.


        :return: The ignore_sizing_requirements of this FeatureSettings.
        :rtype: bool
        """
        return self._ignore_sizing_requirements

    @ignore_sizing_requirements.setter
    def ignore_sizing_requirements(self, ignore_sizing_requirements):
        """Sets the ignore_sizing_requirements of this FeatureSettings.


        :param ignore_sizing_requirements: The ignore_sizing_requirements of this FeatureSettings.
        :type ignore_sizing_requirements: bool
        """

        self._ignore_sizing_requirements = ignore_sizing_requirements

    @property
    def add_unconditionally(self):
        """Gets the add_unconditionally of this FeatureSettings.


        :return: The add_unconditionally of this FeatureSettings.
        :rtype: bool
        """
        return self._add_unconditionally

    @add_unconditionally.setter
    def add_unconditionally(self, add_unconditionally):
        """Sets the add_unconditionally of this FeatureSettings.


        :param add_unconditionally: The add_unconditionally of this FeatureSettings.
        :type add_unconditionally: bool
        """

        self._add_unconditionally = add_unconditionally
