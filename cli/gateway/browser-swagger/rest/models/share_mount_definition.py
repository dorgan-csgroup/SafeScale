# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.reference import Reference
from rest import util

from rest.models.reference import Reference  # noqa: E501

class ShareMountDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host=None, share=None, path=None, type=None, options=None, with_cache=None):  # noqa: E501
        """ShareMountDefinition - a model defined in OpenAPI

        :param host: The host of this ShareMountDefinition.  # noqa: E501
        :type host: Reference
        :param share: The share of this ShareMountDefinition.  # noqa: E501
        :type share: Reference
        :param path: The path of this ShareMountDefinition.  # noqa: E501
        :type path: str
        :param type: The type of this ShareMountDefinition.  # noqa: E501
        :type type: str
        :param options: The options of this ShareMountDefinition.  # noqa: E501
        :type options: str
        :param with_cache: The with_cache of this ShareMountDefinition.  # noqa: E501
        :type with_cache: bool
        """
        self.openapi_types = {
            'host': Reference,
            'share': Reference,
            'path': str,
            'type': str,
            'options': str,
            'with_cache': bool
        }

        self.attribute_map = {
            'host': 'host',
            'share': 'share',
            'path': 'path',
            'type': 'type',
            'options': 'options',
            'with_cache': 'withCache'
        }

        self._host = host
        self._share = share
        self._path = path
        self._type = type
        self._options = options
        self._with_cache = with_cache

    @classmethod
    def from_dict(cls, dikt) -> 'ShareMountDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShareMountDefinition of this ShareMountDefinition.  # noqa: E501
        :rtype: ShareMountDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this ShareMountDefinition.


        :return: The host of this ShareMountDefinition.
        :rtype: Reference
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ShareMountDefinition.


        :param host: The host of this ShareMountDefinition.
        :type host: Reference
        """

        self._host = host

    @property
    def share(self):
        """Gets the share of this ShareMountDefinition.


        :return: The share of this ShareMountDefinition.
        :rtype: Reference
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this ShareMountDefinition.


        :param share: The share of this ShareMountDefinition.
        :type share: Reference
        """

        self._share = share

    @property
    def path(self):
        """Gets the path of this ShareMountDefinition.


        :return: The path of this ShareMountDefinition.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ShareMountDefinition.


        :param path: The path of this ShareMountDefinition.
        :type path: str
        """

        self._path = path

    @property
    def type(self):
        """Gets the type of this ShareMountDefinition.


        :return: The type of this ShareMountDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShareMountDefinition.


        :param type: The type of this ShareMountDefinition.
        :type type: str
        """

        self._type = type

    @property
    def options(self):
        """Gets the options of this ShareMountDefinition.


        :return: The options of this ShareMountDefinition.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ShareMountDefinition.


        :param options: The options of this ShareMountDefinition.
        :type options: str
        """

        self._options = options

    @property
    def with_cache(self):
        """Gets the with_cache of this ShareMountDefinition.


        :return: The with_cache of this ShareMountDefinition.
        :rtype: bool
        """
        return self._with_cache

    @with_cache.setter
    def with_cache(self, with_cache):
        """Sets the with_cache of this ShareMountDefinition.


        :param with_cache: The with_cache of this ShareMountDefinition.
        :type with_cache: bool
        """

        self._with_cache = with_cache
