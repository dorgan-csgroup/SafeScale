# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest import util


class HostSizing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_cpu_count=None, max_cpu_count=None, min_ram_size=None, max_ram_size=None, min_disk_size=None, gpu_count=None, min_cpu_freq=None):  # noqa: E501
        """HostSizing - a model defined in OpenAPI

        :param min_cpu_count: The min_cpu_count of this HostSizing.  # noqa: E501
        :type min_cpu_count: int
        :param max_cpu_count: The max_cpu_count of this HostSizing.  # noqa: E501
        :type max_cpu_count: int
        :param min_ram_size: The min_ram_size of this HostSizing.  # noqa: E501
        :type min_ram_size: float
        :param max_ram_size: The max_ram_size of this HostSizing.  # noqa: E501
        :type max_ram_size: float
        :param min_disk_size: The min_disk_size of this HostSizing.  # noqa: E501
        :type min_disk_size: int
        :param gpu_count: The gpu_count of this HostSizing.  # noqa: E501
        :type gpu_count: int
        :param min_cpu_freq: The min_cpu_freq of this HostSizing.  # noqa: E501
        :type min_cpu_freq: float
        """
        self.openapi_types = {
            'min_cpu_count': int,
            'max_cpu_count': int,
            'min_ram_size': float,
            'max_ram_size': float,
            'min_disk_size': int,
            'gpu_count': int,
            'min_cpu_freq': float
        }

        self.attribute_map = {
            'min_cpu_count': 'minCpuCount',
            'max_cpu_count': 'maxCpuCount',
            'min_ram_size': 'minRamSize',
            'max_ram_size': 'maxRamSize',
            'min_disk_size': 'minDiskSize',
            'gpu_count': 'gpuCount',
            'min_cpu_freq': 'minCpuFreq'
        }

        self._min_cpu_count = min_cpu_count
        self._max_cpu_count = max_cpu_count
        self._min_ram_size = min_ram_size
        self._max_ram_size = max_ram_size
        self._min_disk_size = min_disk_size
        self._gpu_count = gpu_count
        self._min_cpu_freq = min_cpu_freq

    @classmethod
    def from_dict(cls, dikt) -> 'HostSizing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HostSizing of this HostSizing.  # noqa: E501
        :rtype: HostSizing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_cpu_count(self):
        """Gets the min_cpu_count of this HostSizing.


        :return: The min_cpu_count of this HostSizing.
        :rtype: int
        """
        return self._min_cpu_count

    @min_cpu_count.setter
    def min_cpu_count(self, min_cpu_count):
        """Sets the min_cpu_count of this HostSizing.


        :param min_cpu_count: The min_cpu_count of this HostSizing.
        :type min_cpu_count: int
        """

        self._min_cpu_count = min_cpu_count

    @property
    def max_cpu_count(self):
        """Gets the max_cpu_count of this HostSizing.


        :return: The max_cpu_count of this HostSizing.
        :rtype: int
        """
        return self._max_cpu_count

    @max_cpu_count.setter
    def max_cpu_count(self, max_cpu_count):
        """Sets the max_cpu_count of this HostSizing.


        :param max_cpu_count: The max_cpu_count of this HostSizing.
        :type max_cpu_count: int
        """

        self._max_cpu_count = max_cpu_count

    @property
    def min_ram_size(self):
        """Gets the min_ram_size of this HostSizing.


        :return: The min_ram_size of this HostSizing.
        :rtype: float
        """
        return self._min_ram_size

    @min_ram_size.setter
    def min_ram_size(self, min_ram_size):
        """Sets the min_ram_size of this HostSizing.


        :param min_ram_size: The min_ram_size of this HostSizing.
        :type min_ram_size: float
        """

        self._min_ram_size = min_ram_size

    @property
    def max_ram_size(self):
        """Gets the max_ram_size of this HostSizing.


        :return: The max_ram_size of this HostSizing.
        :rtype: float
        """
        return self._max_ram_size

    @max_ram_size.setter
    def max_ram_size(self, max_ram_size):
        """Sets the max_ram_size of this HostSizing.


        :param max_ram_size: The max_ram_size of this HostSizing.
        :type max_ram_size: float
        """

        self._max_ram_size = max_ram_size

    @property
    def min_disk_size(self):
        """Gets the min_disk_size of this HostSizing.


        :return: The min_disk_size of this HostSizing.
        :rtype: int
        """
        return self._min_disk_size

    @min_disk_size.setter
    def min_disk_size(self, min_disk_size):
        """Sets the min_disk_size of this HostSizing.


        :param min_disk_size: The min_disk_size of this HostSizing.
        :type min_disk_size: int
        """

        self._min_disk_size = min_disk_size

    @property
    def gpu_count(self):
        """Gets the gpu_count of this HostSizing.


        :return: The gpu_count of this HostSizing.
        :rtype: int
        """
        return self._gpu_count

    @gpu_count.setter
    def gpu_count(self, gpu_count):
        """Sets the gpu_count of this HostSizing.


        :param gpu_count: The gpu_count of this HostSizing.
        :type gpu_count: int
        """

        self._gpu_count = gpu_count

    @property
    def min_cpu_freq(self):
        """Gets the min_cpu_freq of this HostSizing.


        :return: The min_cpu_freq of this HostSizing.
        :rtype: float
        """
        return self._min_cpu_freq

    @min_cpu_freq.setter
    def min_cpu_freq(self, min_cpu_freq):
        """Sets the min_cpu_freq of this HostSizing.


        :param min_cpu_freq: The min_cpu_freq of this HostSizing.
        :type min_cpu_freq: float
        """

        self._min_cpu_freq = min_cpu_freq
