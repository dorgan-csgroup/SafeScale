# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest.models.host import Host
from rest import util

from rest.models.host import Host  # noqa: E501

class VirtualIp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, network_id=None, private_ip=None, public_ip=None, hosts=None):  # noqa: E501
        """VirtualIp - a model defined in OpenAPI

        :param id: The id of this VirtualIp.  # noqa: E501
        :type id: str
        :param name: The name of this VirtualIp.  # noqa: E501
        :type name: str
        :param network_id: The network_id of this VirtualIp.  # noqa: E501
        :type network_id: str
        :param private_ip: The private_ip of this VirtualIp.  # noqa: E501
        :type private_ip: str
        :param public_ip: The public_ip of this VirtualIp.  # noqa: E501
        :type public_ip: str
        :param hosts: The hosts of this VirtualIp.  # noqa: E501
        :type hosts: List[Host]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'network_id': str,
            'private_ip': str,
            'public_ip': str,
            'hosts': List[Host]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'network_id': 'networkId',
            'private_ip': 'privateIp',
            'public_ip': 'publicIp',
            'hosts': 'hosts'
        }

        self._id = id
        self._name = name
        self._network_id = network_id
        self._private_ip = private_ip
        self._public_ip = public_ip
        self._hosts = hosts

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualIp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualIp of this VirtualIp.  # noqa: E501
        :rtype: VirtualIp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VirtualIp.


        :return: The id of this VirtualIp.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualIp.


        :param id: The id of this VirtualIp.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VirtualIp.


        :return: The name of this VirtualIp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualIp.


        :param name: The name of this VirtualIp.
        :type name: str
        """

        self._name = name

    @property
    def network_id(self):
        """Gets the network_id of this VirtualIp.


        :return: The network_id of this VirtualIp.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this VirtualIp.


        :param network_id: The network_id of this VirtualIp.
        :type network_id: str
        """

        self._network_id = network_id

    @property
    def private_ip(self):
        """Gets the private_ip of this VirtualIp.


        :return: The private_ip of this VirtualIp.
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this VirtualIp.


        :param private_ip: The private_ip of this VirtualIp.
        :type private_ip: str
        """

        self._private_ip = private_ip

    @property
    def public_ip(self):
        """Gets the public_ip of this VirtualIp.


        :return: The public_ip of this VirtualIp.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this VirtualIp.


        :param public_ip: The public_ip of this VirtualIp.
        :type public_ip: str
        """

        self._public_ip = public_ip

    @property
    def hosts(self):
        """Gets the hosts of this VirtualIp.


        :return: The hosts of this VirtualIp.
        :rtype: List[Host]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this VirtualIp.


        :param hosts: The hosts of this VirtualIp.
        :type hosts: List[Host]
        """

        self._hosts = hosts
