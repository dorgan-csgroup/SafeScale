# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest import util


class NFSExportOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, read_only=None, root_squash=None, secure=None, async=None, no_hide=None, cross_mount=None, subtree_check=None):  # noqa: E501
        """NFSExportOptions - a model defined in OpenAPI

        :param read_only: The read_only of this NFSExportOptions.  # noqa: E501
        :type read_only: bool
        :param root_squash: The root_squash of this NFSExportOptions.  # noqa: E501
        :type root_squash: bool
        :param secure: The secure of this NFSExportOptions.  # noqa: E501
        :type secure: bool
        :param async: The async of this NFSExportOptions.  # noqa: E501
        :type async: bool
        :param no_hide: The no_hide of this NFSExportOptions.  # noqa: E501
        :type no_hide: bool
        :param cross_mount: The cross_mount of this NFSExportOptions.  # noqa: E501
        :type cross_mount: bool
        :param subtree_check: The subtree_check of this NFSExportOptions.  # noqa: E501
        :type subtree_check: bool
        """
        self.openapi_types = {
            'read_only': bool,
            'root_squash': bool,
            'secure': bool,
            'async': bool,
            'no_hide': bool,
            'cross_mount': bool,
            'subtree_check': bool
        }

        self.attribute_map = {
            'read_only': 'readOnly',
            'root_squash': 'rootSquash',
            'secure': 'secure',
            'async': 'async',
            'no_hide': 'noHide',
            'cross_mount': 'crossMount',
            'subtree_check': 'subtreeCheck'
        }

        self._read_only = read_only
        self._root_squash = root_squash
        self._secure = secure
        self._async = async
        self._no_hide = no_hide
        self._cross_mount = cross_mount
        self._subtree_check = subtree_check

    @classmethod
    def from_dict(cls, dikt) -> 'NFSExportOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NFSExportOptions of this NFSExportOptions.  # noqa: E501
        :rtype: NFSExportOptions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read_only(self):
        """Gets the read_only of this NFSExportOptions.


        :return: The read_only of this NFSExportOptions.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this NFSExportOptions.


        :param read_only: The read_only of this NFSExportOptions.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def root_squash(self):
        """Gets the root_squash of this NFSExportOptions.


        :return: The root_squash of this NFSExportOptions.
        :rtype: bool
        """
        return self._root_squash

    @root_squash.setter
    def root_squash(self, root_squash):
        """Sets the root_squash of this NFSExportOptions.


        :param root_squash: The root_squash of this NFSExportOptions.
        :type root_squash: bool
        """

        self._root_squash = root_squash

    @property
    def secure(self):
        """Gets the secure of this NFSExportOptions.


        :return: The secure of this NFSExportOptions.
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this NFSExportOptions.


        :param secure: The secure of this NFSExportOptions.
        :type secure: bool
        """

        self._secure = secure

    @property
    def async(self):
        """Gets the async of this NFSExportOptions.


        :return: The async of this NFSExportOptions.
        :rtype: bool
        """
        return self._async

    @async.setter
    def async(self, async):
        """Sets the async of this NFSExportOptions.


        :param async: The async of this NFSExportOptions.
        :type async: bool
        """

        self._async = async

    @property
    def no_hide(self):
        """Gets the no_hide of this NFSExportOptions.


        :return: The no_hide of this NFSExportOptions.
        :rtype: bool
        """
        return self._no_hide

    @no_hide.setter
    def no_hide(self, no_hide):
        """Sets the no_hide of this NFSExportOptions.


        :param no_hide: The no_hide of this NFSExportOptions.
        :type no_hide: bool
        """

        self._no_hide = no_hide

    @property
    def cross_mount(self):
        """Gets the cross_mount of this NFSExportOptions.


        :return: The cross_mount of this NFSExportOptions.
        :rtype: bool
        """
        return self._cross_mount

    @cross_mount.setter
    def cross_mount(self, cross_mount):
        """Sets the cross_mount of this NFSExportOptions.


        :param cross_mount: The cross_mount of this NFSExportOptions.
        :type cross_mount: bool
        """

        self._cross_mount = cross_mount

    @property
    def subtree_check(self):
        """Gets the subtree_check of this NFSExportOptions.


        :return: The subtree_check of this NFSExportOptions.
        :rtype: bool
        """
        return self._subtree_check

    @subtree_check.setter
    def subtree_check(self, subtree_check):
        """Sets the subtree_check of this NFSExportOptions.


        :param subtree_check: The subtree_check of this NFSExportOptions.
        :type subtree_check: bool
        """

        self._subtree_check = subtree_check
