# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest.models.base_model_ import Model
from rest import util


class SshConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user=None, host=None, private_key=None, port=None, gateway=None, secondary_gateway=None, host_name=None):  # noqa: E501
        """SshConfig - a model defined in OpenAPI

        :param user: The user of this SshConfig.  # noqa: E501
        :type user: str
        :param host: The host of this SshConfig.  # noqa: E501
        :type host: str
        :param private_key: The private_key of this SshConfig.  # noqa: E501
        :type private_key: str
        :param port: The port of this SshConfig.  # noqa: E501
        :type port: int
        :param gateway: The gateway of this SshConfig.  # noqa: E501
        :type gateway: SshConfig
        :param secondary_gateway: The secondary_gateway of this SshConfig.  # noqa: E501
        :type secondary_gateway: SshConfig
        :param host_name: The host_name of this SshConfig.  # noqa: E501
        :type host_name: str
        """
        self.openapi_types = {
            'user': str,
            'host': str,
            'private_key': str,
            'port': int,
            'gateway': SshConfig,
            'secondary_gateway': SshConfig,
            'host_name': str
        }

        self.attribute_map = {
            'user': 'user',
            'host': 'host',
            'private_key': 'privateKey',
            'port': 'port',
            'gateway': 'gateway',
            'secondary_gateway': 'secondaryGateway',
            'host_name': 'hostName'
        }

        self._user = user
        self._host = host
        self._private_key = private_key
        self._port = port
        self._gateway = gateway
        self._secondary_gateway = secondary_gateway
        self._host_name = host_name

    @classmethod
    def from_dict(cls, dikt) -> 'SshConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SshConfig of this SshConfig.  # noqa: E501
        :rtype: SshConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self):
        """Gets the user of this SshConfig.


        :return: The user of this SshConfig.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SshConfig.


        :param user: The user of this SshConfig.
        :type user: str
        """

        self._user = user

    @property
    def host(self):
        """Gets the host of this SshConfig.


        :return: The host of this SshConfig.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SshConfig.


        :param host: The host of this SshConfig.
        :type host: str
        """

        self._host = host

    @property
    def private_key(self):
        """Gets the private_key of this SshConfig.


        :return: The private_key of this SshConfig.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this SshConfig.


        :param private_key: The private_key of this SshConfig.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def port(self):
        """Gets the port of this SshConfig.


        :return: The port of this SshConfig.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SshConfig.


        :param port: The port of this SshConfig.
        :type port: int
        """

        self._port = port

    @property
    def gateway(self):
        """Gets the gateway of this SshConfig.


        :return: The gateway of this SshConfig.
        :rtype: SshConfig
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this SshConfig.


        :param gateway: The gateway of this SshConfig.
        :type gateway: SshConfig
        """

        self._gateway = gateway

    @property
    def secondary_gateway(self):
        """Gets the secondary_gateway of this SshConfig.


        :return: The secondary_gateway of this SshConfig.
        :rtype: SshConfig
        """
        return self._secondary_gateway

    @secondary_gateway.setter
    def secondary_gateway(self, secondary_gateway):
        """Sets the secondary_gateway of this SshConfig.


        :param secondary_gateway: The secondary_gateway of this SshConfig.
        :type secondary_gateway: SshConfig
        """

        self._secondary_gateway = secondary_gateway

    @property
    def host_name(self):
        """Gets the host_name of this SshConfig.


        :return: The host_name of this SshConfig.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this SshConfig.


        :param host_name: The host_name of this SshConfig.
        :type host_name: str
        """

        self._host_name = host_name
